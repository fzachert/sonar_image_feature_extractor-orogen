name "sonar_image_feature_extractor"
# Optionally declare the version number
# version "0.1"


using_library "sonar_image_feature_extractor"

#import_types_from "sonar_image_feature_extractorTypes.hpp"
import_types_from "sonar_image_feature_extractor/DetectorTypes.hpp"
import_types_from "base"

#This task uses image-processing in the cartesian space to detect sonar-features
task_context "ImageProcessing" do

    needs_configuration
    
    property("debug_mode", "sonar_image_feature_extractor/DEBUG_MODE", :NO_DEBUG).dynamic.
    doc("Debug image, 0: NO_DEBUG, 1: SMOOTHING, 2: SOBEL, 3: THRESHOLD, 4: FEATURES")
    
    property("smooth_mode", "sonar_image_feature_extractor/SMOOTH_MODE", :GAUSSIAN).dynamic.
    doc("smoothing-algrithm, 0: GAUSSIAN, 1: AVG, 2 MEDIA")
    
    property("threshold_mode", "sonar_image_feature_extractor/THRESHOLD_MODE", :ABSOLUTE).dynamic.
    doc("Threshold-Algorithm, 0: ABSOLUTE -> absolute threshold in percent, 1: ADAPTIVE_MEAN adaptive threshold with the mean of neighborhood").
    doc(" 2: ADAPTIVE_GAUSSIAN -> threshold is the weighted mean of neighborhoo, 3: OTSU")
    
    property("blur", "int", 5).dynamic.
    doc("Size of the blur-filter, number must be odd")
    
    property("sobel", "int", 5).dynamic.
    doc("Size of the sobel-filter, number must be odd")
    
    property("threshold", "double", 0.5).dynamic.
    doc("Relative threshold for the binary image")
    
    property("morph", "int", 0).dynamic.
    doc("Size of the morphologic filter for the closing-operation. Set to 0 to deactivate")
    
    property("cluster_min_size", "int", 20).dynamic
    property("cluster_max_size", "int", 50).dynamic
    property("cluster_noise", "int", 3).dynamic
    
    property("ignore_min_range", "double", 3).
    doc("Ignore the first x meter of the sonar-image")
    
    property("max_sonar_range", "double", 20).
    doc("Maximum range of the sonar")
    
    property("sonar_opening_angle", "double", 45).
    doc("Opening angle of the sonar in degree")
    
    input_port("sonar_image", "base/samples/frame/Frame")
    
    output_port("debug_frame", "base/samples/frame/Frame")
    output_port("detected_buoy", "sonar_image_feature_extractor/SonarFeatures")


    port_driven "sonar_image"
end

#This task uses signal-rpocessing on single sonar_beams to detect sonar-features
task_context "SonarBeamProcessing" do
  
  input_port("sonar_image", "base/samples/SonarScan")

  property("debug_mode", "sonar_image_feature_extractor/DEBUG_MODE", :NO_DEBUG).dynamic.
  doc("Debug image, 0: NO_DEBUG, 1: SMOOTHING, 2: SOBEL, 3: THRESHOLD, 4: FEATURES")
  
  property("blur", "int", 2).dynamic
  property("threshold", "double", 0.5).dynamic.
  doc("Relative threshold for the binary image")
    
  property("cluster_min_size", "int", 20).dynamic
  property("cluster_max_size", "int", 50).dynamic
  property("cluster_noise", "int", 3).dynamic
  
  
  output_port("debug_frame", "base/samples/SonarScan")
  output_port("detected_buoy", "sonar_image_feature_extractor/SonarFeatures")
  
  port_driven "sonar_image"
  
end

